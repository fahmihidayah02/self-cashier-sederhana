# -*- coding: utf-8 -*-
"""modul_transaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cqhNx4xZT928LKyN4fkbaPz8gLmd7Vaf
"""

#modul untuk membuat tabel
from tabulate import tabulate

#membuat class Transaction
class Transaction:

  #menginisiasi method init
  def __init__(self):
      """
      membuat class Transaction untuk membuat transaksi belanja

      """
      #menyimpan daftar barang ke dalam list
      self.daftar_barang = []

  #method untuk menambahkan barang ke dalam daftar barang
  def tambah_barang(self, nama_barang, jumlah_barang, harga_barang):
      """
      method untuk menginputkan barang ke dalam daftar barang

      Parameters:
      -----------
          nama_barang : str
              nama barang yang akan diinputkan

          jumlah_barang : int
              jumlah barang yang akan diinputkan

          harga_barang : int
              harga barang yang akan diinputkan

      Returns:
      --------
          none
      """
      #cek baris kode apakah ada error atau tidak
      try:

        #membuat data dictionany untuk daftar barang
        data = {
            'nama barang': nama_barang,
            'jumlah barang': jumlah_barang,
            'harga barang': harga_barang,
            'total harga': jumlah_barang * harga_barang
              }
        #cek kondisi nama barang harus berupa huruf
        if type(data['nama barang']) != str:

          #pesan error apabila inputan tidak berupa huruf
          raise TypeError('nama barang tidak sesuai')

        #cek kondisi apabila jumlah barang tidak berupa angka
        if type(data['jumlah barang']) != int:

          #pesan error apabila jumlah barang tidak berupa angka
          raise TypeError('jumlah barang harus berupa angka')

        #cek kondisi apabila harga barang tidak berupa angka
        if type(data['harga barang']) != int:

          #pesan error apabila harga barang tidak berupa angka
          raise TypeError('harga barang tidak sesuai')

      #menangkap pesan error
      except TypeError as e:

          #menampilkan tiap pesan apabila inputan tidak sesuai
          print(e)

      #memasukkan inputan data kedalam daftar barang
      self.daftar_barang.append(data)


  #method untuk mengubah nama barang berdasarkan nama barang
  def update_nama_barang(self, nama_barang, nama_barang_baru):
      """
      method untuk mengubah salah satu nama barang

      Parameters:
      -----------
          nama_barang : str
              nama barang yang ingin diubah namanya

          nama_barang_baru : str
              input nama barang baru

      Returns:
      --------
          none
      """

      #nilai awal barang tidak ada didalam daftar barang
      barang_ada = False

      #cek error
      try:
          #perulangan untuk mengupdate data nama barang
          for barang in self.daftar_barang:

              #cek kondisi nama barang yang akan diubah
              if barang['nama barang'] == nama_barang:

                  #cek apabila barang ada didalam daftar barang
                  barang_ada = True

                  #mengubah nama barang dengan nama baru
                  barang['nama barang'] = nama_barang_baru

                  #menampilkan pesan nama barang yang berhasil diubah
                  print(f"{nama_barang} berhasil diupdate menjadi {nama_barang_baru}")

              #kondisi apabila tidak ada barang yang ingin diubah didalam daftar barang
              if barang_ada != True:

                #pesan error ababila barang tidak terdaftar
                raise ValueError(f"nama barang {nama_barang} tidak ada didalam daftar barang")

      #menangkap pesan error
      except Exception as e:

          #menampilkan pesan error barang tidak ada di daftar barang
          print("Error:", e)

  #method untuk mengubah jumlah barang berdasarkan nama barang
  def update_jumlah_barang(self, nama_barang, jumlah_barang_baru):
      """
      method untuk mengubah jumlah barang

      Parameters:
      -----------
          nama_barang : str
              nama barang yang ingin diubah jumlah barangnya

          jumlah_barang_baru : int
              input jumlah barang baru

      Returns:
      --------
          none
      """

      #kondisi nilai barang
      barang_ada = False

      #cek error
      try:

        #cek kondisi apabila jumlah tidak berupa angka
        if type(jumlah_barang_baru) != int:

            #pesan apabila jumlah tidak berupa angka
            raise Exception("jumlah barang harus berupa angka")

        #perulangkan untuk mengubah jumlah barang
        for barang in self.daftar_barang:

            #cek kondisi nama barang yang akan diubah jumlahnya
            if barang['nama barang'] == nama_barang:

                  #kondisi apabila ada barang yang akan diubah jumlahnya didalam daftar barang
                  barang_ada = True
                  #mengubah jumlah barang dengan jumlah barang baru
                  barang['jumlah barang'] = jumlah_barang_baru

                  #mengubah total harga secara otomatis apabila jumlah barang diupdate
                  barang['total harga'] = jumlah_barang_baru * barang['harga barang']

                  #menampilkan pesan jumlah barang yang telah diupdate
                  print("jumlah barang berhasil diupdate")

        #cek kondisi apabila tidak ada nama barang didalam daftar barang
        if barang_ada != True:

          #pesan error apabila tidak ada barang didalam daftar
          raise ValueError(f"nama barang {nama_barang} tidak ada didalam daftar barang")

      #menangkap pesan error
      except Exception as e:

          #menampilkan pesan error apabila tidak ada barang didalam daftar
          print("Error:", e)

  #method untuk mengubah harga barang berdasarkan nama barang
  def update_harga_barang(self, nama_barang, harga_barang_baru):
      """
      membuat method update harga barang untuk mengubah harga barang

      Parameters:
      -----------
          nama_barang : str
              nama barang yang ingin diubah harganya

          harga_barang_baru : int
              input harga barang baru

      Returns:
      --------
          none
      """

      #kondisi awal barang di daftar
      barang_ada = False

      #cek apakah ada error
      try:

        #cek kondisi apabila inputan tidak berupa angka
        if type(harga_barang_baru) != int:

            #pesan error apabila harga tidak berupa angka
            raise Exception("harga barang harus berupa angka")

        #perulangan untuk mengubah harga barang
        for barang in self.daftar_barang:

            #cek kondisi nama barang yang akan diubah harganya
            if barang['nama barang'] == nama_barang:

                  #kondisi apabila barang ada didaftar barang
                  barang_ada = True

                  #megubah harga barang dengan harga yang baru
                  barang['harga barang'] = harga_barang_baru

                  #mengubah total harga secara otomatis apabila jumlah diupdate
                  barang['total harga'] = barang['jumlah barang'] * harga_barang_baru

                  #menampilkan pesan harga barang yang telah terupdate
                  print(f"harga barang berhasil diupdate")

        #cek kondisi apabila tidak ada barang didalam daftar barang
        if barang_ada != True:

            #pesan error apabila tidak ada barang didalam daftar barang
            raise ValueError(f"nama barang {nama_barang} tidak ada didalam daftar barang")

      #menangkap pesan error
      except Exception as e:

          #menampilkan pesan setiap error
          print("Error:", e)

  #method untuk menghapus salah satu barang berdasarkan nama barang
  def hapus_barang(self, nama_barang):
      """
      method untuk menghapus salah satu barang didalam daftar barang

      Parameters:
      -----------
          nama_barang : str
              menghapus barang berdasarkan nama barang

      Returns:
      --------
          none
      """

      #kondisi awal barang kosong
      barang_ada = False

      #cek error
      try:

          #perulangan untuk menghapus barang
          for barang in self.daftar_barang:

                #cek kondisi nama barang yang akan dihapus
                if barang['nama barang'] == nama_barang:

                    #kondisi barang jika ada didalam daftar
                    barang_ada = True

                    #menghapus barang dari dari daftar barang
                    self.daftar_barang.remove(barang)

                    #menampilkan pesan barang yang berhasil dihapus
                    print(f"{barang['nama barang']} berhasil dihapus")

          #cek kondisi apabila tidak ada barang didalam daftar barang
          if barang_ada != True:

            #pesan error apabila tidak ada barang didalam daftar barang
            raise ValueError(f"nama barang {nama_barang} yang dihapus tidak ada dalam daftar")

      #menangkap pesan setiap error
      except Exception as e:

          #menampilkan pesan setiap error
          print("Error:", e)

  #method untuk menghapus semua daftar barang di list
  def reset_transaction(self):
      """
      method untuk menghapus semua daftar barang yang dibeli

      """
      #hapus semua list didalam daftar barang
      self.daftar_barang.clear()

      #menampilkan pesan data berhasil dihapus
      print("Data berhasil direset")

  #method untuk cek order belanjaan
  def cek_order(self):
      """
      method untuk mengecek dan menampilkan inputan daftar barang

      """
      #cek apakah ada error
      try:

        #perulangan untuk cek apakah inputan sudah benar atau belum
        for barang in self.daftar_barang:

            #cek kondisi apabila inputan nama barang tidak berupa huruf
            if type(barang['nama barang']) != str:

              #pesan error apabila inputan nama barang tidak berupa huruf
              raise TypeError('nama barang tidak sesuai')

             #cek kondisi apabila inputan jumlah barang tidak berupa angka
            if type(barang['jumlah barang']) != int:

              #pesan error apabila inputan jumlah barang tidak berupa angka
              raise TypeError('jumlah barang harus berupa angka')

             #cek kondisi apabila inputan harga barang tidak berupa angka
            if type(barang['harga barang']) != int:

              #pesan error apabila inputan  harga barang tidak berupa angka
              raise TypeError('harga barang tidak sesuai')

      #menangkap pesan tiap-tiap error
      except TypeError as e:

          #menampilkan pesan error apabila ada salah input data
          print("Terdapat kesalahan input data")

          #menampilkan pesan tiap-tiap error
          print(e)

      else:

        #menampilkan pesan apabila inputan sudah benar
        print("Pemesanan sudah benar")

      #membuat header tabel daftar barang
      headers = ['Nama Barang', 'Jumlah Barang', 'Harga Barang', 'Total Harga Barang']

      #membuat isi tabel daftar barang
      rows = [[barang['nama barang'], barang['jumlah barang'], barang['harga barang'], barang['total harga']] for barang in self.daftar_barang]

      #menampilkan ini daftar barang kedalam bentuk tabel menggunakan library tabulate
      print(tabulate(rows, headers = headers, tablefmt = "heavy_outline", stralign = "center", numalign = "center"))

  #method untuk mengitung total belanja dari daftar belanja
  def total_belanja(self):
      """
      method untuk menghitung total belanja daftar belanja

      """
      #memberikan nilai 0 karena total belanja belum dihitung
      total_belanja = 0

      #perulangan untuk menghitung total belanja
      for barang in self.daftar_barang:

          #mengalikan jumlah barang dengan harga barang,
          #kemudian total harga barang masing2 dijumlahkan menjadi total belanja
          total_belanja += barang['jumlah barang'] * barang['harga barang']

      #cek kondisi apabila total belanja lebih dari 500 ribu
      if total_belanja > 500_000:

          #menghitung total bayar dengan diskon 10%
          total_bayar = total_belanja - (total_belanja * 0.1)

          #menampilkan pesan bahwa total belanja mendapat diskon 10%
          print('Selamat, belanja anda mendapat diskon 10%')

      #cek kondisi apabila total belanja lebih dari 300 ribu
      elif total_belanja > 300_000:

          #menghitung total bayar dengan diskon 8%
          total_bayar = total_belanja - (total_belanja * 0.08)

          #menampilkan pesan bahwa total belanja mendapat dikskon 8%
          print('Selamat, belanja anda mendapat diskon 8%')

      #cek kondisi apabila total belanja lebih dari 200 ribu
      elif total_belanja > 200_000:

          #menghitung total bayar dengan diskon 5%
          total_bayar = total_belanja - (total_belanja * 0.05)

          #menampilkan pesan bahwa total belanja mendapat dikskon 5%
          print('Selamat, belanja anda mendapat diskon 5%')

      else:
          #menampilkan total bayar saja apabila total belanja dibawah 200 ribu
          total_bayar = total_belanja

      #menampilkan pesan total belanja
      print(f'Total Belanja: {total_belanja}')

      #menampilkan pesan total yang harus dibayarkan
      print(f'Total Bayar: {round(total_bayar)}')

trnsct_123 = Transaction()
trnsct_123.tambah_barang("apel", 1, 1000)
trnsct_123.cek_order()

trnsct_123.tambah_barang("jambu", 3, 2000)
trnsct_123.cek_order()

trnsct_123.update_nama_barang("apel", "mangga")
trnsct_123.cek_order()

trnsct_123.update_jumlah_barang("mangga", 12)
trnsct_123.cek_order()

trnsct_123.update_harga_barang("mangga", 200_000)
trnsct_123.cek_order()

trnsct_123.hapus_barang('jambu')
trnsct_123.cek_order()

trnsct_123.cek_order()
trnsct_123.total_belanja()

trnsct_123.reset_transaction()
trnsct_123.cek_order()

"""Yang belum :
1. bikin tes case error dengan try exception
2. bikin modular code (bikin modul 'main')
3. revisi ppt --> canva
4. revisi flowchart
5. upload github kalo udah selesai
6. bikin video presentasi, upload youtube

"""